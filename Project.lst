Microsoft (R) Macro Assembler Version 11.00.50727.1	    12/26/17 10:05:26
Min_database.asm					     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE macros.inc
			      C .NOLIST
			      C .LIST
			      C 
				.386
				.model flat,stdcall
Min_database.asm(4) : warning A4011:multiple .MODEL directives found : .MODEL ignored
 = 00001389			BUFFER_SIZE = 5001
 = 000000FB			key = 251
 00000000			.data
 00000000  00001393 [		buffer byte BUFFER_SIZE+10 DUP(?)
	    00
	   ]
 00001393  00001389 [		arr byte BUFFER_SIZE dup(?)
	    00
	   ]
 0000271C  00000004 [		arrr byte 4 dup(?)
	    00
	   ]
 00002720  00001389 [		sorted_arr byte BUFFER_SIZE dup(?)
	    00
	   ]
 00003AA9  00001393 [		finalbuffer byte BUFFER_SIZE+10 DUP(?)
	    00
	   ]
 00004E3C 00			eqcount byte 0
 00004E3D  00000014 [		filenamee BYTE 20 DUP(?)
	    00
	   ]
 00004E51 64 61 74 61 62	filename byte "database_report.txt",0
	   61 73 65 5F 72
	   65 70 6F 72 74
	   2E 74 78 74 00
 00004E65  00000003 [		newkey byte 3 dup(?)
	    00
	   ]
 00004E68 00000000		keylength dword 0
 00004E6C 00000000		fileHandle HANDLE ?
 00004E70 00000000		stringLength Dword ?
 00004E74 00000000		stringLen Dword 0
 00004E78 00000000		countbyte Dword 0

 00004E7C 00000000		bytesWritten Dword ?
 00004E80 43 61 6E 6E 6F	str1 BYTE "Cannot create file",0dh,0ah,0
	   74 20 63 72 65
	   61 74 65 20 66
	   69 6C 65 0D 0A
	   00
 00004E95 5B 70 6C 65 61	keylog BYTE "[please Enter the db-key ]: ",0
	   73 65 20 45 6E
	   74 65 72 20 74
	   68 65 20 64 62
	   2D 6B 65 79 20
	   5D 3A 20 00
 00004EB2 45 6E 74 65 72	updatestudent byte "Enter Student ID to Update: ",0
	   20 53 74 75 64
	   65 6E 74 20 49
	   44 20 74 6F 20
	   55 70 64 61 74
	   65 3A 20 00
 00004ECF 45 6E 74 65 72	delstudent byte "Enter Student ID to Delete: ",0
	   20 53 74 75 64
	   65 6E 74 20 49
	   44 20 74 6F 20
	   44 65 6C 65 74
	   65 3A 20 00
 00004EEC 45 6E 74 65 72	DisplaySTD byte "Enter Student ID to Display info: ",0
	   20 53 74 75 64
	   65 6E 74 20 49
	   44 20 74 6F 20
	   44 69 73 70 6C
	   61 79 20 69 6E
	   66 6F 3A 20 00
 00004F0F 31 2D 66 6F 72	op1 byte "1-for Enroll Student in existed file. ",0 
	   20 45 6E 72 6F
	   6C 6C 20 53 74
	   75 64 65 6E 74
	   20 69 6E 20 65
	   78 69 73 74 65
	   64 20 66 69 6C
	   65 2E 20 00
 00004F36 36 2D 66 6F 72	op6 byte "6-for Enroll Student in new file. ",0 
	   20 45 6E 72 6F
	   6C 6C 20 53 74
	   75 64 65 6E 74
	   20 69 6E 20 6E
	   65 77 20 66 69
	   6C 65 2E 20 00
 00004F59 32 2D 66 6F 72	op2 byte "2-for Update Student Data. ",0 
	   20 55 70 64 61
	   74 65 20 53 74
	   75 64 65 6E 74
	   20 44 61 74 61
	   2E 20 00
 00004F75 33 2D 66 6F 72	op3 byte "3-for Delete Student Data. ",0  
	   20 44 65 6C 65
	   74 65 20 53 74
	   75 64 65 6E 74
	   20 44 61 74 61
	   2E 20 00
 00004F91 34 2D 66 6F 72	op4 byte "4-for Display it's info. ",0  
	   20 44 69 73 70
	   6C 61 79 20 69
	   74 27 73 20 69
	   6E 66 6F 2E 20
	   00
 00004FAB 35 2D 66 6F 72	op5 byte "5-for Generate Full Report. ",0
	   20 47 65 6E 65
	   72 61 74 65 20
	   46 75 6C 6C 20
	   52 65 70 6F 72
	   74 2E 20 00
 00004FC8 65 6E 74 65 72	sav byte "enter 1 to save all work.",0
	   20 31 20 74 6F
	   20 73 61 76 65
	   20 61 6C 6C 20
	   77 6F 72 6B 2E
	   00
 00004FE2 30 2D 66 6F 72	op0 byte "0-for exit. ",0
	   20 65 78 69 74
	   2E 20 00
 00004FEF 45 6E 74 65 72	enroll byte "Enter Student's ID and Grade seprated by :@: :",0
	   20 53 74 75 64
	   65 6E 74 27 73
	   20 49 44 20 61
	   6E 64 20 47 72
	   61 64 65 20 73
	   65 70 72 61 74
	   65 64 20 62 79
	   20 3A 40 3A 20
	   3A 00
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;mr.pink
 0000501E 00000000		u dword 0
 00005022 00000000		u1 dword 0
 00005026  00001389 [		TempBuffer BYTE BUFFER_SIZE DUP(?)
	    00
	   ]
 000063AF 34			sid byte  '4'
 000063B0 00000000		myind dword  ?
 000063B4 00000000		fileend dword ?
 000063B8  0000000D [		info byte 13 dup(?)
	    00
	   ]
 000063C5 53 74 75 64 65	report_entery byte "StudentID Student Name Numeric Grade Alphabetic Grade",0dh,0ah,0
	   6E 74 49 44 20
	   53 74 75 64 65
	   6E 74 20 4E 61
	   6D 65 20 4E 75
	   6D 65 72 69 63
	   20 47 72 61 64
	   65 20 41 6C 70
	   68 61 62 65 74
	   69 63 20 47 72
	   61 64 65 0D 0A
	   00
 000063FD 23 00			del byte "#",0
 000063FF  00001389 [		zeft_buffer byte BUFFER_SIZE dup(?)
	    00
	   ]
 00007788 00000000		addrr dword ?
 0000778C 00			counter byte 0
 0000778D 03			divident byte 3
				;;;;;;;;

 00000000			.code
				;-------------------------------------------------------
				; BubbleSort
				; Sort an array of 32-bit signed integers in ascending
				; order, using the bubble sort algorithm.
				; Receives: pointer to array, array size
				; Returns: nothing
				;-------------------------------------------------------
 00000000			BubbleSort PROC USES eax ecx esi,
				pArray:PTR Dword,     ; pointer to array
				Count:DWORD           ; array size
 00000000  55		   *	    push   ebp
 00000001  8B EC	   *	    mov    ebp, esp
 00000003  50		   *	    push   eax
 00000004  51		   *	    push   ecx
 00000005  56		   *	    push   esi
 00000006  8B 4D 0C		mov ecx,Count
 00000009  49			dec ecx               ; decrement count by 1

 0000000A  51			L1: push ecx          ; save outer loop count
 0000000B  8B 75 08		mov esi,pArray        ; point to first value
 0000000E  8B 06		L2: mov eax,[esi]     ; get array value
 00000010  80 7E 04 30		cmp byte ptr [esi+4],'0'
 00000014  72 18		jb L4
 00000016  80 7E 04 39		cmp byte ptr[esi+4],'9'
 0000001A  77 12		ja L4
 0000001C  39 46 04		cmp [esi+4],eax       ; compare a pair of values
 0000001F  7F 05		jg L3                 ; if [ESI] <= [ESI+4], no exchange
 00000021  87 46 04		xchg eax,[esi+4]      ; exchange the pair
 00000024  89 06		mov [esi],eax
 00000026  83 C6 04		L3: add esi,4         ; move both pointers forward
 00000029  E2 E3		loop L2               ; inner loop
 0000002B  59			pop ecx               ; retrieve outer loop count
 0000002C  E2 DC		loop L1               ; else repeat outer loop
 0000002E			L4: ret
 0000002E  5E		   *	    pop    esi
 0000002F  59		   *	    pop    ecx
 00000030  58		   *	    pop    eax
 00000031  C9		   *	    leave  
 00000032  C2 0008	   *	    ret    00008h
 00000035			BubbleSort ENDP
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;;search with paramters 
				;;offset of id , buffer offset,id size, buffer size,return array offset
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 00000035			search proc serid :ptr byte, serbuf :ptr byte, seridl :dword, serbul :dword,fbl :ptr dword,snb :dword, serRBuf :ptr byte

 00000035  55		   *	    push   ebp
 00000036  8B EC	   *	    mov    ebp, esp
 00000038  8B 75 08		mov esi,serid
 0000003B  8B 7D 0C		mov edi,serbuf
 0000003E  57			push edi
 0000003F  83 C7 04		add edi,4
 00000042  89 3D 000063B0 R	mov myind,edi


 00000048			ag:
 00000048  83 C7 04		add edi,4
 0000004B  8B 75 08		mov esi, serid
 0000004E  80 3F 2C		cmp byte ptr[edi],','
 00000051  75 1B		jne NR
 00000053  83 EF 04		sub edi,4
 00000056  B9 00000004		mov ecx, 4
 0000005B			sear:

 0000005B  80 3F 2C		cmp byte ptr[edi],','
 0000005E  74 0E		je NR
 00000060  8A 16		mov dl,[esi]
 00000062  8A 1F		mov bl,[edi]
 00000064  47			inc edi
 00000065  46			inc esi
 00000066  3A D3		cmp dl,bl
 00000068  75 04		jne NR
				 
 0000006A  E2 EF		loop sear
 0000006C  EB 19		jmp done

 0000006E			NR:
 0000006E  47			inc edi
 0000006F  80 3F 23		cmp byte ptr[edi],'#'
 00000072  75 FA		jne NR
 00000074  47			inc edi
 00000075  89 3D 000063B0 R	mov myind,edi
 0000007B  B9 00000004		mov ecx,4
 00000080  3B 7D 14		cmp edi, serbul
 00000083  74 1F		je wr
 00000085  EB C1		jmp ag

 00000087			done:
 00000087  8B 45 18		mov eax,fbl
 0000008A  8B 3D 000063B0 R	mov edi,myind
 00000090  8B 75 20		mov esi,serrbuf
 00000093  03 75 1C		add esi,snb
 00000096			l:
 00000096  8A 1F		mov bl,[edi]
 00000098  88 1E		mov [esi],bl
 0000009A  46			inc esi
 0000009B  47			inc edi
 0000009C  83 00 01		add dword ptr[eax],1
 0000009F  80 3F 23		cmp byte ptr[edi],'#'
 000000A2  75 F2		jne l
 000000A4			wr:
				ret
 000000A4  C9		   *	    leave  
 000000A5  C2 001C	   *	    ret    0001Ch
 000000A8			search endp
Min_database.asm(149) : warning A6004:procedure argument or local not referenced : seridl

				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 000000A8			main proc
 000000A8  BA 00004F0F R	mov edx,offset op1
 000000AD  E8 00000174		call DisplayMessage
 000000B2  BA 00004F36 R	mov edx,offset op6
 000000B7  E8 0000016A		call DisplayMessage
 000000BC  BA 00004F59 R	mov edx,offset op2
 000000C1  E8 00000160		call DisplayMessage
 000000C6  BA 00004F75 R	mov edx,offset op3
 000000CB  E8 00000156		call DisplayMessage
 000000D0  BA 00004F91 R	mov edx,offset op4
 000000D5  E8 0000014C		call DisplayMessage
 000000DA  BA 00004FAB R	mov edx,offset op5
 000000DF  E8 00000142		call DisplayMessage
 000000E4  BA 00004FE2 R	mov edx,offset op0
 000000E9  E8 00000138		call DisplayMessage
 000000EE  E8 00000007		call comparing
				exit
 000000F3  6A 00	   *	    push   +000000000h
 000000F5  E8 00000000 E   *	    call   ExitProcess
 000000FA			main endp
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;;comparing  input  proc for startup
				;;
				;;
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 000000FA			comparing proc
 000000FA  60			pushad
 000000FB			lo:
 000000FB  E8 00000000 E	call readdec
 00000100  83 F8 00		cmp eax ,0
 00000103  0F 84 0000010A	je done
 00000109  83 F8 01		cmp eax,1
 0000010C  0F 84 000000AC	je  enstd
 00000112  83 F8 02		cmp eax,2
 00000115  74 6C		je upstd
 00000117  83 F8 03		cmp eax,3
 0000011A  74 4C		je delstd
 0000011C  83 F8 04		cmp eax,4
 0000011F  74 2C		je disstd
 00000121  83 F8 05		cmp eax,5
 00000124  74 07		je genfull
 00000126  83 F8 06		cmp eax,6
 00000129  74 70		je enrollnewstudentwithfile
 0000012B  EB CE		jmp lo


 0000012D			genfull:
 0000012D  E8 0000038F		call report
				mwrite "enter 0 to repeat this transaction or else done"
 0000778E		     1		.data		
 0000778E 65 6E 74 65 72     1		??0000 BYTE "enter 0 to repeat this transaction or else done",0	
	   20 30 20 74 6F
	   20 72 65 70 65
	   61 74 20 74 68
	   69 73 20 74 72
	   61 6E 73 61 63
	   74 69 6F 6E 20
	   6F 72 20 65 6C
	   73 65 20 64 6F
	   6E 65 00
 00000132		     1		.code
 00000132  52		     1		push	edx
 00000133  BA 0000778E R     1		mov	edx,OFFSET ??0000
 00000138  E8 00000000 E     1		call	WriteString
 0000013D  5A		     1		pop	edx
 0000013E  E8 00000000 E	call readdec
 00000143  83 F8 00		cmp eax,0
 00000146  74 E5		je genfull
 00000148  E9 000000C6		jmp done
 0000014D			disstd:
				;call displayinfo
				mwrite "enter 0 to repeat this transaction or else done"
 000077BE		     1		.data		
 000077BE 65 6E 74 65 72     1		??0001 BYTE "enter 0 to repeat this transaction or else done",0	
	   20 30 20 74 6F
	   20 72 65 70 65
	   61 74 20 74 68
	   69 73 20 74 72
	   61 6E 73 61 63
	   74 69 6F 6E 20
	   6F 72 20 65 6C
	   73 65 20 64 6F
	   6E 65 00
 0000014D		     1		.code
 0000014D  52		     1		push	edx
 0000014E  BA 000077BE R     1		mov	edx,OFFSET ??0001
 00000153  E8 00000000 E     1		call	WriteString
 00000158  5A		     1		pop	edx
 00000159  E8 00000000 E	call readdec
 0000015E  83 F8 00		cmp eax,0
 00000161  74 EA		je disstd
 00000163  E9 000000AB		jmp done
 00000168			delstd:
				;call deletestudent
				mwrite "enter 0 to repeat this transaction or else done"
 000077EE		     1		.data		
 000077EE 65 6E 74 65 72     1		??0002 BYTE "enter 0 to repeat this transaction or else done",0	
	   20 30 20 74 6F
	   20 72 65 70 65
	   61 74 20 74 68
	   69 73 20 74 72
	   61 6E 73 61 63
	   74 69 6F 6E 20
	   6F 72 20 65 6C
	   73 65 20 64 6F
	   6E 65 00
 00000168		     1		.code
 00000168  52		     1		push	edx
 00000169  BA 000077EE R     1		mov	edx,OFFSET ??0002
 0000016E  E8 00000000 E     1		call	WriteString
 00000173  5A		     1		pop	edx
 00000174  E8 00000000 E	call readdec
 00000179  83 F8 00		cmp eax,0
 0000017C  74 EA		je delstd
 0000017E  E9 00000090		jmp done
 00000183			upstd:
				;call updatestudent
				mwrite "enter 0 to repeat this transaction or else done"
 0000781E		     1		.data		
 0000781E 65 6E 74 65 72     1		??0003 BYTE "enter 0 to repeat this transaction or else done",0	
	   20 30 20 74 6F
	   20 72 65 70 65
	   61 74 20 74 68
	   69 73 20 74 72
	   61 6E 73 61 63
	   74 69 6F 6E 20
	   6F 72 20 65 6C
	   73 65 20 64 6F
	   6E 65 00
 00000183		     1		.code
 00000183  52		     1		push	edx
 00000184  BA 0000781E R     1		mov	edx,OFFSET ??0003
 00000189  E8 00000000 E     1		call	WriteString
 0000018E  5A		     1		pop	edx
 0000018F  E8 00000000 E	call readdec
 00000194  83 F8 00		cmp eax,0
 00000197  74 EA		je upstd
 00000199  EB 78		jmp done

 0000019B			enrollnewstudentwithfile:
 0000019B  E8 0000010F		call enrollstd
				mwrite "enter 0 to repeat this transaction or else done"
 0000784E		     1		.data		
 0000784E 65 6E 74 65 72     1		??0004 BYTE "enter 0 to repeat this transaction or else done",0	
	   20 30 20 74 6F
	   20 72 65 70 65
	   61 74 20 74 68
	   69 73 20 74 72
	   61 6E 73 61 63
	   74 69 6F 6E 20
	   6F 72 20 65 6C
	   73 65 20 64 6F
	   6E 65 00
 000001A0		     1		.code
 000001A0  52		     1		push	edx
 000001A1  BA 0000784E R     1		mov	edx,OFFSET ??0004
 000001A6  E8 00000000 E     1		call	WriteString
 000001AB  5A		     1		pop	edx
 000001AC  E8 00000000 E	call readdec
 000001B1  83 F8 00		cmp eax,0
 000001B4  74 E5		je enrollnewstudentwithfile
 000001B6  61			popad
				exit
 000001B7  6A 00	   *	    push   +000000000h
 000001B9  E8 00000000 E   *	    call   ExitProcess

 000001BE			enstd:
				;return stringLen 
 000001BE  E8 000001DC		call ofile
 000001C3  E8 0000006B		call encrypt
 000001C8			enstudent:
				;return stringLength
 000001C8  E8 000001B3		call inputfromuser
 000001CD  BF 00001393 R	mov edi,offset arr
 000001D2  BE 00000000 R	mov esi,offset buffer
 000001D7  03 35 00004E74 R	add esi,stringLen
 000001DD  8B 0D 00004E70 R	mov ecx,stringLength

 000001E3			lol:
 000001E3  8A 1F		mov bl,[edi]
 000001E5  88 1E		mov [esi],bl
 000001E7  47			inc edi
 000001E8  46			inc esi
 000001E9  E2 F8		loop lol
 000001EB  8B 1D 00004E74 R	mov ebx,stringLen
 000001F1  03 1D 00004E70 R	add ebx,stringLength
 000001F7  89 1D 00004E74 R	mov stringLen,ebx
				mwrite "enter 0 to repeat this transaction or else done"
 0000787E		     1		.data		
 0000787E 65 6E 74 65 72     1		??0005 BYTE "enter 0 to repeat this transaction or else done",0	
	   20 30 20 74 6F
	   20 72 65 70 65
	   61 74 20 74 68
	   69 73 20 74 72
	   61 6E 73 61 63
	   74 69 6F 6E 20
	   6F 72 20 65 6C
	   73 65 20 64 6F
	   6E 65 00
 000001FD		     1		.code
 000001FD  52		     1		push	edx
 000001FE  BA 0000787E R     1		mov	edx,OFFSET ??0005
 00000203  E8 00000000 E     1		call	WriteString
 00000208  5A		     1		pop	edx
 00000209  E8 00000000 E	call readdec
 0000020E  83 F8 00		cmp eax,0
 00000211  74 B5		je enstudent
 00000213			done:
 00000213  E8 0000001B		call encrypt
 00000218  E8 00000050		call createfile_
 0000021D  61			popad
				exit
 0000021E  6A 00	   *	    push   +000000000h
 00000220  E8 00000000 E   *	    call   ExitProcess
 00000225  C3			ret
 00000226			comparing endp


				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;;paramter : take offset in edx and display 
				;;
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 00000226			DisplayMessage PROC
				;display the message
 00000226  60			pushad
 00000227  E8 00000000 E	call writestring
 0000022C  E8 00000000 E	call Crlf
 00000231  61			popad
 00000232  C3			ret
 00000233			DisplayMessage endp
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;;proc to encrypt and decrypt using XOR instruction
				;;
				;;
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 00000233			encrypt proc
 00000233  60			pushad
 00000234  8B 0D 00004E74 R	mov ecx,stringLen
 0000023A  83 F9 00		cmp ecx,0
 0000023D  74 2C		je done
 0000023F  BE 00000000		mov esi,0
 00000244			Lo:
 00000244  80 B6 00000000 R	xor buffer[esi],key ; translate a byte
	   FB
 0000024B  46			inc esi
 0000024C  E2 F6		loop Lo
 0000024E  EB 1B		jmp done
				mWrite <"Buffer:",0dh,0ah,0dh,0ah>
 000078AE		     1		.data		
 000078AE 42 75 66 66 65     1		??0006 BYTE "Buffer:",0dh,0ah,0dh,0ah,0	
	   72 3A 0D 0A 0D
	   0A 00
 00000250		     1		.code
 00000250  52		     1		push	edx
 00000251  BA 000078AE R     1		mov	edx,OFFSET ??0006
 00000256  E8 00000000 E     1		call	WriteString
 0000025B  5A		     1		pop	edx
 0000025C  BA 00000000 R	mov edx,OFFSET buffer                ; display the buffer
 00000261  E8 00000000 E	call WriteString
 00000266  E8 00000000 E	call Crlf
 0000026B			done:
 0000026B  61			popad
 0000026C  C3			ret 
 0000026D			encrypt endp
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;;proc to create file(createoutputfile) instruction
				;;write into file from buffer after encrypt data with( writetofile)
				;;then use(closefile)
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 0000026D			createfile_ proc
				;create new file
 0000026D  60			pushad
 0000026E  BA 00004E3D R	mov edx, offset filenamee
 00000273  E8 00000000 E	call createoutputfile
 00000278  A3 00004E6C R	mov fileHandle ,eax
				; Check for errors.
 0000027D  83 F8 FF		cmp eax, INVALID_HANDLE_VALUE      ; error found?
 00000280  75 11		jne file_ok                        ; no: skip
 00000282  BA 00004E80 R	mov edx,OFFSET str1                ; display error
 00000287  E8 FFFFFF9A		call DisplayMessage
				exit
 0000028C  6A 00	   *	    push   +000000000h
 0000028E  E8 00000000 E   *	    call   ExitProcess
 00000293			file_ok:
				    
 00000293  A1 00004E6C R	    mov eax,fileHandle
 00000298  BA 00000000 R		mov edx,OFFSET buffer
 0000029D  8B 0D 00004E74 R		mov ecx , stringLen
 000002A3  E8 00000000 E		call WriteToFile
 000002A8  E8 00000000 E		call CloseFile

 000002AD  61			popad
				;exit
 000002AE  C3			ret
 000002AF			createfile_ endp
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;;enroll student and button save
				;;
				;;
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 000002AF			enrollstd proc
 000002AF  BA 00000000 R	mov edx,offset buffer
 000002B4			looop:
 000002B4  C6 02 23		mov byte ptr[edx],'#'
 000002B7  42			inc edx
 000002B8  52			push edx
 000002B9  BA 00004FEF R	mov edx,offset enroll
 000002BE  E8 00000000 E	call writestring
 000002C3  5A			pop edx
 000002C4  B9 00001389		mov ecx ,BUFFER_SIZE
 000002C9  E8 00000000 E	call readstring
 000002CE  01 05 00004E78 R	add countbyte,eax
 000002D4  52			push edx 
 000002D5  BA 00004FC8 R	mov edx,offset sav
 000002DA  E8 00000000 E	call writestring
 000002DF  5A			pop edx
 000002E0  E8 00000000 E	call readdec
 000002E5  83 F8 01		cmp eax,1
 000002E8  74 02		je savee
 000002EA  EB C8		jmp looop
 000002EC			savee:
 000002EC  8B 1D 00004E78 R	mov ebx,countbyte
 000002F2  89 1D 00004E74 R	mov stringLen,ebx
 000002F8  E8 FFFFFF36		call encrypt
 000002FD  E8 00000001		call createfileonly

 00000302  C3			ret
 00000303			enrollstd endp




				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 00000303			createfileonly proc
				;create new file
 00000303  60			pushad
				mwrite "Enter the new file name with .txt : "
 000078BA		     1		.data		
 000078BA 45 6E 74 65 72     1		??0007 BYTE "Enter the new file name with .txt : ",0	
	   20 74 68 65 20
	   6E 65 77 20 66
	   69 6C 65 20 6E
	   61 6D 65 20 77
	   69 74 68 20 2E
	   74 78 74 20 3A
	   20 00
 00000304		     1		.code
 00000304  52		     1		push	edx
 00000305  BA 000078BA R     1		mov	edx,OFFSET ??0007
 0000030A  E8 00000000 E     1		call	WriteString
 0000030F  5A		     1		pop	edx
 00000310  BA 00004E3D R	mov edx,offset filenamee
 00000315  B9 00000014		mov ecx,lengthof filenamee
 0000031A  E8 00000000 E	call readstring
				mwrite "Enter the new file key 0-255: "
 000078DF		     1		.data		
 000078DF 45 6E 74 65 72     1		??0008 BYTE "Enter the new file key 0-255: ",0	
	   20 74 68 65 20
	   6E 65 77 20 66
	   69 6C 65 20 6B
	   65 79 20 30 2D
	   32 35 35 3A 20
	   00
 0000031F		     1		.code
 0000031F  52		     1		push	edx
 00000320  BA 000078DF R     1		mov	edx,OFFSET ??0008
 00000325  E8 00000000 E     1		call	WriteString
 0000032A  5A		     1		pop	edx
 0000032B  BA 00004E65 R	mov edx,offset newkey
 00000330  E8 00000000 E	call readstring
 00000335  A3 00004E68 R	mov keylength,eax
 0000033A  E8 00000130		call addkey
 0000033F  BA 00004E3D R	mov edx, offset filenamee
 00000344  E8 00000000 E	call createoutputfile
 00000349  A3 00004E6C R	mov fileHandle ,eax
				; Check for errors.
 0000034E  83 F8 FF		cmp eax, INVALID_HANDLE_VALUE      ; error found?
 00000351  75 11		jne file_ok                        ; no: skip
 00000353  BA 00004E80 R	mov edx,OFFSET str1                ; display error
 00000358  E8 FFFFFEC9		call DisplayMessage
				exit
 0000035D  6A 00	   *	    push   +000000000h
 0000035F  E8 00000000 E   *	    call   ExitProcess
 00000364			file_ok:
				 
 00000364  A1 00004E6C R	    mov eax,fileHandle
 00000369  BA 00000000 R		mov edx,OFFSET buffer
 0000036E  8B 0D 00004E74 R		mov ecx , stringLen
 00000374  E8 00000000 E		call WriteToFile
 00000379  E8 00000000 E		call CloseFile
 0000037E  61			popad
				;exit
 0000037F  C3			ret
 00000380			createfileonly endp
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 00000380			inputfromuser proc
 00000380  BA 00004FEF R	mov edx ,offset enroll
 00000385  E8 00000000 E	call writestring
 0000038A  B9 00001389		mov ecx,BUFFER_SIZE
 0000038F  BA 00001393 R	mov edx,offset arr
 00000394  E8 00000000 E	call readstring
 00000399  A3 00004E70 R	mov stringLength ,eax
 0000039E  C3			ret
 0000039F			inputfromuser endp
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 0000039F			ofile proc
 0000039F			loo:
				mwrite "Enter the file name with .txt:"
 000078FE		     1		.data		
 000078FE 45 6E 74 65 72     1		??0009 BYTE "Enter the file name with .txt:",0	
	   20 74 68 65 20
	   66 69 6C 65 20
	   6E 61 6D 65 20
	   77 69 74 68 20
	   2E 74 78 74 3A
	   00
 0000039F		     1		.code
 0000039F  52		     1		push	edx
 000003A0  BA 000078FE R     1		mov	edx,OFFSET ??0009
 000003A5  E8 00000000 E     1		call	WriteString
 000003AA  5A		     1		pop	edx
 000003AB  B9 00000014		mov ecx,lengthof filenamee
 000003B0  BA 00004E3D R	mov edx,offset filenamee
 000003B5  E8 00000000 E	call readstring
				mwrite "Enter the DBkey: "
 0000791D		     1		.data		
 0000791D 45 6E 74 65 72     1		??000A BYTE "Enter the DBkey: ",0	
	   20 74 68 65 20
	   44 42 6B 65 79
	   3A 20 00
 000003BA		     1		.code
 000003BA  52		     1		push	edx
 000003BB  BA 0000791D R     1		mov	edx,OFFSET ??000A
 000003C0  E8 00000000 E     1		call	WriteString
 000003C5  5A		     1		pop	edx
 000003C6  B9 00000003		mov ecx,lengthof newkey
 000003CB  41			inc ecx
 000003CC  BA 00004E65 R	mov edx,offset newkey
 000003D1  E8 00000000 E	call readstring
 000003D6  C6 80 00004E65 R	mov newkey[eax],0
	   00

 000003DD  BA 00004E3D R	mov edx,OFFSET filenamee
 000003E2  E8 00000000 E	call OpenInputFile
 000003E7  A3 00004E6C R	mov fileHandle,eax

 000003EC  83 F8 FF		cmp eax,INVALID_HANDLE_VALUE      ; error opening file?
 000003EF  75 13		jne file_ok                       ; no: skip
				mWrite <"Cannot open file",0dh,0ah>
 0000792F		     1		.data		
 0000792F 43 61 6E 6E 6F     1		??000B BYTE "Cannot open file",0dh,0ah,0	
	   74 20 6F 70 65
	   6E 20 66 69 6C
	   65 0D 0A 00
 000003F1		     1		.code
 000003F1  52		     1		push	edx
 000003F2  BA 0000792F R     1		mov	edx,OFFSET ??000B
 000003F7  E8 00000000 E     1		call	WriteString
 000003FC  5A		     1		pop	edx
				exit                         ; and quit
 000003FD  6A 00	   *	    push   +000000000h
 000003FF  E8 00000000 E   *	    call   ExitProcess
 00000404			file_ok:
				; Read the file into a buffer.
 00000404  BA 00000000 R	mov edx,OFFSET buffer
 00000409  B9 00001389		mov ecx,BUFFER_SIZE
 0000040E  E8 00000000 E	call ReadFromFile
 00000413  A3 00004E74 R	mov stringLen,eax 
				mWrite "File size: "
 00007942		     1		.data		
 00007942 46 69 6C 65 20     1		??000C BYTE "File size: ",0	
	   73 69 7A 65 3A
	   20 00
 00000418		     1		.code
 00000418  52		     1		push	edx
 00000419  BA 00007942 R     1		mov	edx,OFFSET ??000C
 0000041E  E8 00000000 E     1		call	WriteString
 00000423  5A		     1		pop	edx
 00000424  E8 00000000 E	call WriteDec                        ; display file size
 00000429  E8 00000000 E	call Crlf              
 0000042E  BA 00000000 R	mov edx,OFFSET buffer
 00000433  BB 00004E65 R	mov ebx,offset newkey
 00000438  B9 00000003		mov ecx,3
 0000043D			l1:
 0000043D  8A 02		mov al,[edx]
 0000043F  3A 03		cmp al,[ebx]
 00000441  75 06		jne err
 00000443  42			inc edx
 00000444  43			inc ebx
 00000445  E2 F6		loop l1
 00000447  EB 1B		jmp donee
 00000449			err:
				mwrite "Database Error Key Not Found!! try again"
 0000794E		     1		.data		
 0000794E 44 61 74 61 62     1		??000D BYTE "Database Error Key Not Found!! try again",0	
	   61 73 65 20 45
	   72 72 6F 72 20
	   4B 65 79 20 4E
	   6F 74 20 46 6F
	   75 6E 64 21 21
	   20 74 72 79 20
	   61 67 61 69 6E
	   00
 00000449		     1		.code
 00000449  52		     1		push	edx
 0000044A  BA 0000794E R     1		mov	edx,OFFSET ??000D
 0000044F  E8 00000000 E     1		call	WriteString
 00000454  5A		     1		pop	edx
 00000455  A1 00004E6C R	mov eax,fileHandle
 0000045A  E8 00000000 E	call CloseFile
 0000045F  E9 FFFFFF3B		jmp loo
 00000464			donee:
 00000464  A1 00004E6C R	mov eax,fileHandle
 00000469  E8 00000000 E	call CloseFile

 0000046E  C3			ret
 0000046F			ofile endp
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;;write the key in file
 0000046F			addkey proc
 0000046F  B8 00000003		mov eax,3
 00000474  03 05 00004E74 R	add eax,stringLen
 0000047A  BE 00000000 R	mov esi,offset buffer
 0000047F  03 35 00004E74 R	add esi,stringLen
 00000485  BF 00000000 R	mov edi,offset buffer
 0000048A  03 F8		add edi,eax
 0000048C  8B 0D 00004E74 R	mov ecx,stringLen
 00000492  A3 00004E74 R	mov stringLen,eax
 00000497  BB 00000000		mov ebx,0
 0000049C			l1:
 0000049C  8A 1E		mov bl,[esi]
 0000049E  88 1F		mov [edi],bl
 000004A0  4F			dec edi
 000004A1  4E			dec esi
 000004A2  E2 F8		loop l1
 000004A4  BB 00000000		mov ebx,0
 000004A9  BF 00000000 R	mov edi,offset buffer
 000004AE  BA 00004E65 R	mov edx,offset newkey
 000004B3  B9 00000003		mov ecx,lengthof newkey
 000004B8			l2:
 000004B8  8A 1A		mov bl,[edx]
 000004BA  88 1F		mov [edi],bl
 000004BC  42			inc edx
 000004BD  47			inc edi
 000004BE  E2 F8		loop l2



 000004C0  C3			ret
 000004C1			addkey endp
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 000004C1			 report proc
 000004C1			X:
				mwrite "Please Enter File Name : "
 00007977		     1		.data		
 00007977 50 6C 65 61 73     1		??000E BYTE "Please Enter File Name : ",0	
	   65 20 45 6E 74
	   65 72 20 46 69
	   6C 65 20 4E 61
	   6D 65 20 3A 20
	   00
 000004C1		     1		.code
 000004C1  52		     1		push	edx
 000004C2  BA 00007977 R     1		mov	edx,OFFSET ??000E
 000004C7  E8 00000000 E     1		call	WriteString
 000004CC  5A		     1		pop	edx
 000004CD  BA 00004E3D R	mov edx,offset filenamee
 000004D2  B9 00000014		mov ecx,lengthof filenamee
 000004D7  E8 00000000 E	call readstring
				;open file 
 000004DC  BA 00004E3D R	mov edx,OFFSET filenamee
 000004E1  E8 00000000 E	call OpenInputFile
 000004E6  A3 00004E6C R	mov fileHandle,eax

				;load file data
 000004EB  BA 00000000 R	mov edx,OFFSET buffer
 000004F0  B9 00001389		mov ecx,BUFFER_SIZE
 000004F5  E8 00000000 E	call ReadFromFile
 000004FA  A3 00004E74 R	mov stringLen,eax
				;call encrypt

				mwrite "full report sorted by ID(1)/Grade(2): "
 00007991		     1		.data		
 00007991 66 75 6C 6C 20     1		??000F BYTE "full report sorted by ID(1)/Grade(2): ",0	
	   72 65 70 6F 72
	   74 20 73 6F 72
	   74 65 64 20 62
	   79 20 49 44 28
	   31 29 2F 47 72
	   61 64 65 28 32
	   29 3A 20 00
 000004FF		     1		.code
 000004FF  52		     1		push	edx
 00000500  BA 00007991 R     1		mov	edx,OFFSET ??000F
 00000505  E8 00000000 E     1		call	WriteString
 0000050A  5A		     1		pop	edx
 0000050B  E8 00000000 E	call readdec	
 00000510  83 F8 01		cmp eax,1
 00000513  74 17		je IDSORT
 00000515  83 F8 02		cmp eax,2
 00000518  0F 84 000000D5	je GRADESort
				mwrite "invalid option try again"
 000079B8		     1		.data		
 000079B8 69 6E 76 61 6C     1		??0010 BYTE "invalid option try again",0	
	   69 64 20 6F 70
	   74 69 6F 6E 20
	   74 72 79 20 61
	   67 61 69 6E 00
 0000051E		     1		.code
 0000051E  52		     1		push	edx
 0000051F  BA 000079B8 R     1		mov	edx,OFFSET ??0010
 00000524  E8 00000000 E     1		call	WriteString
 00000529  5A		     1		pop	edx
 0000052A  EB 95		jmp X


 0000052C			IDSORT:
 0000052C			getallid:
 0000052C  BA 00000000 R	mov edx ,offset buffer
 00000531  B9 00001393		mov ecx,lengthof buffer
 00000536  BF 00001393 R	mov edi,offset arr
 0000053B  83 C2 03		add edx,3
 0000053E			lop:
 0000053E  80 3A 23		cmp byte ptr[edx],'#'
 00000541  74 02		je store_id
 00000543  EB 1D		jmp skip

 00000545			store_id:
 00000545  42			inc edx
 00000546  BB 00000020		mov ebx," "
 0000054B  39 1A		cmp [edx],ebx
 0000054D  0F 84 00000118	je quit
 00000553  51			push ecx
 00000554  B9 00000004		mov ecx,4

 00000559			lo:
 00000559  8A 1A		mov bl,[edx]
 0000055B  88 1F		mov [edi],bl
 0000055D  47			inc edi
 0000055E  42			inc edx
 0000055F  E2 F8		loop lo

 00000561  59			pop ecx
 00000562			skip:
 00000562  42			inc edx
 00000563  E2 D9		loop lop

				invoke BubbleSort ,offset arr,lengthof arr
 00000565  68 00001389	   *	    push   +000001389h
 0000056A  68 00001393 R   *	    push   dword  ptr OFFSET FLAT: arr
 0000056F  E8 FFFFFA8C	   *	    call   BubbleSort
				;;; we should now call search fun to return records in sorted array 
				;;; i will pass to it sorted array

 00000574  B9 00000003		mov ecx,3
 00000579  BE 00000000		mov esi,0
 0000057E			llll:
 0000057E  51			push ecx
 0000057F  B9 00000004		mov ecx,4
 00000584  BF 00000000		mov edi,0
 00000589			lala:
 00000589  8A 9E 00001393 R	mov bl,arr[esi]
 0000058F  88 9F 0000271C R	mov arrr[edi],bl
 00000595  46			inc esi
 00000596  47			inc edi
 00000597  E2 F0		loop lala
 00000599  56			push esi
				invoke search , offset arrr ,  offset buffer , 4 , lengthof buffer , offset u , u1 , offset finalbuffer
 0000059A  68 00003AA9 R   *	    push   dword  ptr OFFSET FLAT: finalbuffer
 0000059F  FF 35 00005022 R *	    push   u1
 000005A5  68 0000501E R   *	    push   dword  ptr OFFSET FLAT: u
 000005AA  68 00001393	   *	    push   +000001393h
 000005AF  6A 04	   *	    push   +000000004h
 000005B1  68 00000000 R   *	    push   dword  ptr OFFSET FLAT: buffer
 000005B6  68 0000271C R   *	    push   dword  ptr OFFSET FLAT: arrr
 000005BB  E8 FFFFFA75	   *	    call   search
 000005C0  A1 0000501E R	mov eax,u
 000005C5  A3 00005022 R	mov u1,eax
 000005CA  5E			pop esi
 000005CB  59			pop ecx
 000005CC  E2 B0		loop llll

 000005CE  BA 00004E51 R	mov edx, offset filename
 000005D3  E8 00000000 E	call createoutputfile
 000005D8  A3 00004E6C R	mov fileHandle ,eax
				; Check for errors.
 000005DD  83 F8 FF		cmp eax, INVALID_HANDLE_VALUE      ; error found?
 000005E0  75 70		jne file_ok                        ; no: skip
 000005E2  BA 00004E80 R	mov edx,OFFSET str1                ; display error
 000005E7  E8 FFFFFC3A		call DisplayMessage
				exit
 000005EC  6A 00	   *	    push   +000000000h
 000005EE  E8 00000000 E   *	    call   ExitProcess
				;;;;;;;;;;;;;;;;;;;;;;;;;;
 000005F3			GRADESort:
 000005F3  BA 00000000 R	mov edx ,offset buffer
 000005F8  B9 00001393		mov ecx,lengthof buffer
 000005FD  BF 00001393 R	mov edi,offset arr
 00000602			LOOL:
 00000602  80 3A 2C		cmp byte ptr [edx],','
 00000605  74 03		je cnt
 00000607  42			inc edx
 00000608  EB 28		jmp donne

 0000060A			cnt:
 0000060A  B8 00000000		mov eax,0
 0000060F  FE 05 0000778C R	inc counter
 00000615  A0 0000778C R	mov al,counter
 0000061A  F6 35 0000778D R	div divident
 00000620  80 FC 00		cmp ah,0
 00000623  74 02		je donelool
 00000625  EB 0B		jmp donne

 00000627			donelool:
 00000627  BB 00000000		mov ebx ,0
 0000062C  42			inc edx
 0000062D  8A 1A		mov bl,[edx]
 0000062F  88 1F		mov [edi],bl
 00000631  47			inc edi
 00000632			donne:
 00000632  E2 CE		loop LOOL
				invoke BubbleSort ,offset arr,lengthof arr
 00000634  68 00001389	   *	    push   +000001389h
 00000639  68 00001393 R   *	    push   dword  ptr OFFSET FLAT: arr
 0000063E  E8 FFFFF9BD	   *	    call   BubbleSort
				;;;;;test;;;;;
 00000643  BA 00001393 R	mov edx,offset arr
 00000648  B9 00001389		mov ecx,lengthof arr
 0000064D  E8 00000000 E	call writestring


				;;;;;;;;;;;;;;;;;;;;;;;;;;
 00000652			file_ok:
				 
 00000652  A1 00004E6C R	    mov eax,fileHandle
					;mov edx,offset report_entery
					;mov ecx,lengthof report_entery
					;call WriteToFile
 00000657  BA 00003AA9 R		mov edx,OFFSET finalbuffer
 0000065C  B9 00001393			mov ecx , lengthof   finalbuffer
 00000661  E8 00000000 E		call WriteToFile
 00000666  E8 00000000 E		call CloseFile
 0000066B			quit:
 0000066B  C3			ret
 0000066C			report endp
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;;delete
				;;
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 0000066C			delete proc  id :ptr byte, buf :ptr byte, idl :dword, bul :dword, serRBuf :ptr byte
 0000066C  55		   *	    push   ebp
 0000066D  8B EC	   *	    mov    ebp, esp
 0000066F  8B 75 08		mov esi,id

 00000672  8B 7D 0C		mov edi,buf
 00000675  57			push edi
 00000676  83 C7 01		add edi,1
 00000679  89 3D 000063B0 R	mov myind,edi

 0000067F			ag:
 0000067F  8B 45 10		mov eax,idl
 00000682  03 F8		add edi,eax

 00000684  80 3F 2C		cmp byte ptr[edi],','
 00000687  75 18		jne NR1
 00000689  2B F8		sub edi,eax
 0000068B  8B 4D 10		mov ecx, idl
 0000068E			s1:

 0000068E  80 3F 2C		cmp byte ptr[edi],','
 00000691  74 0E		je NR1
 00000693  8A 16		mov dl,[esi]
 00000695  8A 1F		mov bl,[edi]
 00000697  47			inc edi
 00000698  46			inc esi
 00000699  3A D3		cmp dl,bl
 0000069B  75 04		jne NR1
				 
 0000069D  E2 EF		loop s1
 0000069F  EB 19		jmp dne

 000006A1			NR1:
 000006A1  47			inc edi
 000006A2  80 3F 23		cmp byte ptr[edi],'#'
 000006A5  75 FA		jne NR1
 000006A7  47			inc edi
 000006A8  89 3D 000063B0 R	mov myind,edi
 000006AE  B9 00000004		mov ecx,4
 000006B3  3B 7D 14		cmp edi, bul
 000006B6  74 26		je wr
 000006B8  EB C5		jmp ag

 000006BA			dne:
 000006BA  5F			pop edi
 000006BB  8B 75 18		mov esi,serrbuf
 000006BE  8B CF		mov ecx,edi
 000006C0  03 4D 14		add ecx,bul
 000006C3			l1:
 000006C3  8A 1F		mov bl,[edi]
 000006C5  88 1E		mov [esi],bl
 000006C7  47			inc edi
 000006C8  46			inc esi
 000006C9  3B 3D 000063B0 R	cmp edi,myind
 000006CF  75 07		jne con
 000006D1			DR:
 000006D1  47			inc edi
 000006D2  80 3F 23		cmp byte ptr[edi],'#'
 000006D5  75 FA		jne DR
 000006D7  47			inc edi
 000006D8			con:

 000006D8  3B F9		cmp edi,ecx
 000006DA  75 E7		jne l1

 000006DC  EB 0C		jmp re
 000006DE			wr:
				mWrite <"invalid id">
 000079D1		     1		.data		
 000079D1 69 6E 76 61 6C     1		??0011 BYTE "invalid id",0	
	   69 64 20 69 64
	   00
 000006DE		     1		.code
 000006DE  52		     1		push	edx
 000006DF  BA 000079D1 R     1		mov	edx,OFFSET ??0011
 000006E4  E8 00000000 E     1		call	WriteString
 000006E9  5A		     1		pop	edx

 000006EA			re:

				ret
 000006EA  C9		   *	    leave  
 000006EB  C2 0014	   *	    ret    00014h
 000006EE			delete endp

				end main
Microsoft (R) Macro Assembler Version 11.00.50727.1	    12/26/17 10:05:26
Min_database.asm					     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000079DC Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000006EE Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

BubbleSort . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000035 Public STDCALL
  pArray . . . . . . . . . . . .	DWord	 bp + 00000008
  Count  . . . . . . . . . . . .	DWord	 bp + 0000000C
  L1 . . . . . . . . . . . . . .	L Near	 0000000A _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 0000000E _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 00000026 _TEXT	
  L4 . . . . . . . . . . . . . .	L Near	 0000002E _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DisplayMessage . . . . . . . . .	P Near	 00000226 _TEXT	Length= 0000000D Public STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
addkey . . . . . . . . . . . . .	P Near	 0000046F _TEXT	Length= 00000052 Public STDCALL
  l1 . . . . . . . . . . . . . .	L Near	 0000049C _TEXT	
  l2 . . . . . . . . . . . . . .	L Near	 000004B8 _TEXT	
comparing  . . . . . . . . . . .	P Near	 000000FA _TEXT	Length= 0000012C Public STDCALL
  lo . . . . . . . . . . . . . .	L Near	 000000FB _TEXT	
  genfull  . . . . . . . . . . .	L Near	 0000012D _TEXT	
  disstd . . . . . . . . . . . .	L Near	 0000014D _TEXT	
  delstd . . . . . . . . . . . .	L Near	 00000168 _TEXT	
  upstd  . . . . . . . . . . . .	L Near	 00000183 _TEXT	
  enrollnewstudentwithfile . . .	L Near	 0000019B _TEXT	
  enstd  . . . . . . . . . . . .	L Near	 000001BE _TEXT	
  enstudent  . . . . . . . . . .	L Near	 000001C8 _TEXT	
  lol  . . . . . . . . . . . . .	L Near	 000001E3 _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000213 _TEXT	
createfile_  . . . . . . . . . .	P Near	 0000026D _TEXT	Length= 00000042 Public STDCALL
  file_ok  . . . . . . . . . . .	L Near	 00000293 _TEXT	
createfileonly . . . . . . . . .	P Near	 00000303 _TEXT	Length= 0000007D Public STDCALL
  file_ok  . . . . . . . . . . .	L Near	 00000364 _TEXT	
delete . . . . . . . . . . . . .	P Near	 0000066C _TEXT	Length= 00000082 Public STDCALL
  id . . . . . . . . . . . . . .	DWord	 bp + 00000008
  buf  . . . . . . . . . . . . .	DWord	 bp + 0000000C
  idl  . . . . . . . . . . . . .	DWord	 bp + 00000010
  bul  . . . . . . . . . . . . .	DWord	 bp + 00000014
  serRBuf  . . . . . . . . . . .	DWord	 bp + 00000018
  ag . . . . . . . . . . . . . .	L Near	 0000067F _TEXT	
  s1 . . . . . . . . . . . . . .	L Near	 0000068E _TEXT	
  NR1  . . . . . . . . . . . . .	L Near	 000006A1 _TEXT	
  dne  . . . . . . . . . . . . .	L Near	 000006BA _TEXT	
  l1 . . . . . . . . . . . . . .	L Near	 000006C3 _TEXT	
  DR . . . . . . . . . . . . . .	L Near	 000006D1 _TEXT	
  con  . . . . . . . . . . . . .	L Near	 000006D8 _TEXT	
  wr . . . . . . . . . . . . . .	L Near	 000006DE _TEXT	
  re . . . . . . . . . . . . . .	L Near	 000006EA _TEXT	
encrypt  . . . . . . . . . . . .	P Near	 00000233 _TEXT	Length= 0000003A Public STDCALL
  Lo . . . . . . . . . . . . . .	L Near	 00000244 _TEXT	
  done . . . . . . . . . . . . .	L Near	 0000026B _TEXT	
enrollstd  . . . . . . . . . . .	P Near	 000002AF _TEXT	Length= 00000054 Public STDCALL
  looop  . . . . . . . . . . . .	L Near	 000002B4 _TEXT	
  savee  . . . . . . . . . . . .	L Near	 000002EC _TEXT	
inputfromuser  . . . . . . . . .	P Near	 00000380 _TEXT	Length= 0000001F Public STDCALL
main . . . . . . . . . . . . . .	P Near	 000000A8 _TEXT	Length= 00000052 Public STDCALL
ofile  . . . . . . . . . . . . .	P Near	 0000039F _TEXT	Length= 000000D0 Public STDCALL
  loo  . . . . . . . . . . . . .	L Near	 0000039F _TEXT	
  file_ok  . . . . . . . . . . .	L Near	 00000404 _TEXT	
  l1 . . . . . . . . . . . . . .	L Near	 0000043D _TEXT	
  err  . . . . . . . . . . . . .	L Near	 00000449 _TEXT	
  donee  . . . . . . . . . . . .	L Near	 00000464 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
report . . . . . . . . . . . . .	P Near	 000004C1 _TEXT	Length= 000001AB Public STDCALL
  X  . . . . . . . . . . . . . .	L Near	 000004C1 _TEXT	
  IDSORT . . . . . . . . . . . .	L Near	 0000052C _TEXT	
  getallid . . . . . . . . . . .	L Near	 0000052C _TEXT	
  lop  . . . . . . . . . . . . .	L Near	 0000053E _TEXT	
  store_id . . . . . . . . . . .	L Near	 00000545 _TEXT	
  lo . . . . . . . . . . . . . .	L Near	 00000559 _TEXT	
  skip . . . . . . . . . . . . .	L Near	 00000562 _TEXT	
  llll . . . . . . . . . . . . .	L Near	 0000057E _TEXT	
  lala . . . . . . . . . . . . .	L Near	 00000589 _TEXT	
  GRADESort  . . . . . . . . . .	L Near	 000005F3 _TEXT	
  LOOL . . . . . . . . . . . . .	L Near	 00000602 _TEXT	
  cnt  . . . . . . . . . . . . .	L Near	 0000060A _TEXT	
  donelool . . . . . . . . . . .	L Near	 00000627 _TEXT	
  donne  . . . . . . . . . . . .	L Near	 00000632 _TEXT	
  file_ok  . . . . . . . . . . .	L Near	 00000652 _TEXT	
  quit . . . . . . . . . . . . .	L Near	 0000066B _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
search . . . . . . . . . . . . .	P Near	 00000035 _TEXT	Length= 00000073 Public STDCALL
  serid  . . . . . . . . . . . .	DWord	 bp + 00000008
  serbuf . . . . . . . . . . . .	DWord	 bp + 0000000C
  seridl . . . . . . . . . . . .	DWord	 bp + 00000010
  serbul . . . . . . . . . . . .	DWord	 bp + 00000014
  fbl  . . . . . . . . . . . . .	DWord	 bp + 00000018
  snb  . . . . . . . . . . . . .	DWord	 bp + 0000001C
  serRBuf  . . . . . . . . . . .	DWord	 bp + 00000020
  ag . . . . . . . . . . . . . .	L Near	 00000048 _TEXT	
  sear . . . . . . . . . . . . .	L Near	 0000005B _TEXT	
  NR . . . . . . . . . . . . . .	L Near	 0000006E _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000087 _TEXT	
  l  . . . . . . . . . . . . . .	L Near	 00000096 _TEXT	
  wr . . . . . . . . . . . . . .	L Near	 000000A4 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 0000778E _DATA	
??0001 . . . . . . . . . . . . .	Byte	 000077BE _DATA	
??0002 . . . . . . . . . . . . .	Byte	 000077EE _DATA	
??0003 . . . . . . . . . . . . .	Byte	 0000781E _DATA	
??0004 . . . . . . . . . . . . .	Byte	 0000784E _DATA	
??0005 . . . . . . . . . . . . .	Byte	 0000787E _DATA	
??0006 . . . . . . . . . . . . .	Byte	 000078AE _DATA	
??0007 . . . . . . . . . . . . .	Byte	 000078BA _DATA	
??0008 . . . . . . . . . . . . .	Byte	 000078DF _DATA	
??0009 . . . . . . . . . . . . .	Byte	 000078FE _DATA	
??000A . . . . . . . . . . . . .	Byte	 0000791D _DATA	
??000B . . . . . . . . . . . . .	Byte	 0000792F _DATA	
??000C . . . . . . . . . . . . .	Byte	 00007942 _DATA	
??000D . . . . . . . . . . . . .	Byte	 0000794E _DATA	
??000E . . . . . . . . . . . . .	Byte	 00007977 _DATA	
??000F . . . . . . . . . . . . .	Byte	 00007991 _DATA	
??0010 . . . . . . . . . . . . .	Byte	 000079B8 _DATA	
??0011 . . . . . . . . . . . . .	Byte	 000079D1 _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BUFFER_SIZE  . . . . . . . . . .	Number	 00001389h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
DisplaySTD . . . . . . . . . . .	Byte	 00004EEC _DATA	
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
TempBuffer . . . . . . . . . . .	Byte	 00005026 _DATA	
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
addrr  . . . . . . . . . . . . .	DWord	 00007788 _DATA	
arrr . . . . . . . . . . . . . .	Byte	 0000271C _DATA	
arr  . . . . . . . . . . . . . .	Byte	 00001393 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 00000000 _DATA	
bytesWritten . . . . . . . . . .	DWord	 00004E7C _DATA	
countbyte  . . . . . . . . . . .	DWord	 00004E78 _DATA	
counter  . . . . . . . . . . . .	Byte	 0000778C _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
delstudent . . . . . . . . . . .	Byte	 00004ECF _DATA	
del  . . . . . . . . . . . . . .	Byte	 000063FD _DATA	
divident . . . . . . . . . . . .	Byte	 0000778D _DATA	
enroll . . . . . . . . . . . . .	Byte	 00004FEF _DATA	
eqcount  . . . . . . . . . . . .	Byte	 00004E3C _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileHandle . . . . . . . . . . .	DWord	 00004E6C _DATA	
fileend  . . . . . . . . . . . .	DWord	 000063B4 _DATA	
filenamee  . . . . . . . . . . .	Byte	 00004E3D _DATA	
filename . . . . . . . . . . . .	Byte	 00004E51 _DATA	
finalbuffer  . . . . . . . . . .	Byte	 00003AA9 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
info . . . . . . . . . . . . . .	Byte	 000063B8 _DATA	
keylength  . . . . . . . . . . .	DWord	 00004E68 _DATA	
keylog . . . . . . . . . . . . .	Byte	 00004E95 _DATA	
key  . . . . . . . . . . . . . .	Number	 000000FBh   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
myind  . . . . . . . . . . . . .	DWord	 000063B0 _DATA	
newkey . . . . . . . . . . . . .	Byte	 00004E65 _DATA	
op0  . . . . . . . . . . . . . .	Byte	 00004FE2 _DATA	
op1  . . . . . . . . . . . . . .	Byte	 00004F0F _DATA	
op2  . . . . . . . . . . . . . .	Byte	 00004F59 _DATA	
op3  . . . . . . . . . . . . . .	Byte	 00004F75 _DATA	
op4  . . . . . . . . . . . . . .	Byte	 00004F91 _DATA	
op5  . . . . . . . . . . . . . .	Byte	 00004FAB _DATA	
op6  . . . . . . . . . . . . . .	Byte	 00004F36 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
report_entery  . . . . . . . . .	Byte	 000063C5 _DATA	
sav  . . . . . . . . . . . . . .	Byte	 00004FC8 _DATA	
sid  . . . . . . . . . . . . . .	Byte	 000063AF _DATA	
sorted_arr . . . . . . . . . . .	Byte	 00002720 _DATA	
str1 . . . . . . . . . . . . . .	Byte	 00004E80 _DATA	
stringLength . . . . . . . . . .	DWord	 00004E70 _DATA	
stringLen  . . . . . . . . . . .	DWord	 00004E74 _DATA	
u1 . . . . . . . . . . . . . . .	DWord	 00005022 _DATA	
updatestudent  . . . . . . . . .	Byte	 00004EB2 _DATA	
u  . . . . . . . . . . . . . . .	DWord	 0000501E _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   
zeft_buffer  . . . . . . . . . .	Byte	 000063FF _DATA	

	   2 Warnings
	   0 Errors
